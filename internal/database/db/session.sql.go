// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: session.sql

package db

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, token)
VALUES (?1, ?2)
RETURNING id, user_id, token, created_at
`

type CreateSessionParams struct {
	UserID int64  `db:"user_id"`
	Token  string `db:"token"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.UserID, arg.Token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSessionByUserID = `-- name: DeleteSessionByUserID :one
DELETE FROM sessions
WHERE user_id = ?1
RETURNING id, user_id, token, created_at
`

func (q *Queries) DeleteSessionByUserID(ctx context.Context, userID int64) (Session, error) {
	row := q.db.QueryRowContext(ctx, deleteSessionByUserID, userID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, token, created_at FROM sessions
WHERE token = ?1
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByToken, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
	)
	return i, err
}
