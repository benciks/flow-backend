// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (password, username) VALUES (?1, ?2) RETURNING id, username, password, created_at, taskd_uuid, timew_id, timew_hook
`

type CreateUserParams struct {
	Password string `db:"password"`
	Username string `db:"username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Password, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.TaskdUuid,
		&i.TimewID,
		&i.TimewHook,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT id, username, password, created_at, taskd_uuid, timew_id, timew_hook FROM users WHERE id = ?1
`

func (q *Queries) FindUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.TaskdUuid,
		&i.TimewID,
		&i.TimewHook,
	)
	return i, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT id, username, password, created_at, taskd_uuid, timew_id, timew_hook FROM users WHERE username = ?1
`

func (q *Queries) FindUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.TaskdUuid,
		&i.TimewID,
		&i.TimewHook,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, password, created_at, taskd_uuid, timew_id, timew_hook FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.CreatedAt,
			&i.TaskdUuid,
			&i.TimewID,
			&i.TimewHook,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveTimewHook = `-- name: SaveTimewHook :one
UPDATE users SET timew_hook = ?1 WHERE id = ?2 RETURNING id, username, password, created_at, taskd_uuid, timew_id, timew_hook
`

type SaveTimewHookParams struct {
	TimewHook sql.NullBool `db:"timew_hook"`
	ID        int64        `db:"id"`
}

func (q *Queries) SaveTimewHook(ctx context.Context, arg SaveTimewHookParams) (User, error) {
	row := q.db.QueryRowContext(ctx, saveTimewHook, arg.TimewHook, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.TaskdUuid,
		&i.TimewID,
		&i.TimewHook,
	)
	return i, err
}

const saveTimewID = `-- name: SaveTimewID :one
UPDATE users SET timew_id = ?1 WHERE id = ?2 RETURNING id, username, password, created_at, taskd_uuid, timew_id, timew_hook
`

type SaveTimewIDParams struct {
	TimewID sql.NullInt64 `db:"timew_id"`
	ID      int64         `db:"id"`
}

func (q *Queries) SaveTimewID(ctx context.Context, arg SaveTimewIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, saveTimewID, arg.TimewID, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.TaskdUuid,
		&i.TimewID,
		&i.TimewHook,
	)
	return i, err
}

const saveUserUUID = `-- name: SaveUserUUID :one
UPDATE users SET taskd_uuid = ?1 WHERE id = ?2 RETURNING id, username, password, created_at, taskd_uuid, timew_id, timew_hook
`

type SaveUserUUIDParams struct {
	Uuid sql.NullString `db:"uuid"`
	ID   int64          `db:"id"`
}

func (q *Queries) SaveUserUUID(ctx context.Context, arg SaveUserUUIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, saveUserUUID, arg.Uuid, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.TaskdUuid,
		&i.TimewID,
		&i.TimewHook,
	)
	return i, err
}
